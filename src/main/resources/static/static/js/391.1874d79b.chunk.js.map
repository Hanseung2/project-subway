{"version":3,"file":"static/js/391.1874d79b.chunk.js","mappings":"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","sources":["pages/Routemap.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport subwayData from '../data/test.json';\nimport Main from '../components/section/Main';\n\nconst Routemap = () => {\n    const ref = useRef();\n\n    useEffect(() => {\n        const svg = d3.select(ref.current)\n            .on(\"click\", () => { // 배경 클릭 시 툴팁 제거\n                d3.select(\".tooltip\").remove();\n            }, true) // true로 설정하여 이벤트 캡처 단계에서 이벤트 리스너가 동작하도록 함\n            .attr('width', 800)\n            .attr('height', 600);\n        svg.selectAll(\"*\").remove(); // SVG 요소 내의 모든 자식 요소 제거\n\n        const svgContainer = svg.append(\"g\")\n            .attr(\"id\", \"svg-container\");\n\n        const zoom = d3.zoom()\n            .scaleExtent([0.5, 2]) // 확대/축소 범위 설정\n            .translateExtent([[0, 0], [800, 900]]) // 이동 범위 설정\n            .on(\"zoom\", zoomed);\n\n        svg.call(zoom);\n\n        function zoomed(event) {\n            svgContainer.attr(\"transform\", event.transform);\n        }\n\n        // 스케일 설정\n        const xScale = d3.scaleLinear()\n            .domain(d3.extent(subwayData, d => parseFloat(d.x)))\n            .range([100, 800]);\n\n        const yScale = d3.scaleLinear()\n            .domain(d3.extent(subwayData, d => parseFloat(d.y)))\n            .range([800, 100]);\n\n        // 노선별 색상 설정\n        const lineColor = (line) => {\n            if (line === \"1호선\") return \"#0D3692\";\n            if (line === \"1호선1\") return \"#0D3692\";\n            if (line === \"2호선\") return \"#33A23D\"; // 2호선은 초록색으로 설정\n            if (line === \"3호선\") return \"#FE5B10\";\n            if (line === \"4호선\") return \"#00A2D1\"; // 4호선은 파란색으로 설정\n            if (line === \"5호선\") return \"#8B50A4\";\n            if (line === \"6호선\") return \"#C55C1D\";\n            if (line === \"7호선\") return \"#54640D\";\n            if (line === \"8호선\") return \"#F14C82\";\n            if (line === \"9호선\") return \"#AA9872\";\n            return \"black\"; // 기본 색상\n            /*\n    \n    \"경강선\": \"#003DA5\",\n    \"경의선\": \"#77C4A3\",\n    \"경춘선\": \"#0C8E72\",\n    \"공항철도\": \"#3681B7\",\n    \"분당선\": \"#F5A200\",\n    \"서해선\": \"#81A914\",\n    \"수인선\": \"#F06A00\",\n    \"신분당선\": \"#D4003B\",\n    \"안산선\": \"#00A5DE\",\n    \"우이신설경전철\": \"#B0CE18\",\n    \"의정부경전철\": \"#FFD400\",\n    \"인천1호선\": \"#8CADCB\",\n    \"인천2호선\": \"#F5A200\",\n    \"인천선\": \"#FF8000\",\n    \"일산선\": \"#B0CE18\",\n    \"장항선\": \"#F5A200\",\n    \"중앙선\": \"#77C4A3\",\n    \"김포도시철도\": \"#BDB092\",\n    \"신림선\": \"#738C00\",\n    \"용인경전철\": \"#509F22\",\n    \"경전철의정부\": \"#FFD400\",\n    \"김포골드라인\": \"#A17E46\",\n    \"인천공항 자기부상철도\": \"#0B4CA2\",\n\n             */\n        };\n\n        // 데이터를 라인별로 그룹화\n        const groupedData = d3.group(subwayData, d => d.line);\n\n        // 각 그룹(라인)을 순회하고 선과 원을 그립니다\n        for (const [line, lineData] of groupedData) {\n            const lineGenerator = d3.line()\n                .x(d => xScale(parseFloat(d.x)))\n                .y(d => yScale(parseFloat(d.y)))\n                .curve(d3.curveLinear);\n\n            svgContainer.append(\"path\")\n                .datum(lineData)\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", lineColor(line))\n                .attr(\"stroke-width\", 2)\n                .attr(\"d\", lineGenerator);\n\n            // 각 라인에 대한 원(역) 추가\n            svgContainer.selectAll(`.station-${line}`) // 라인별로 클래스를 구분하여 선택\n                .data(lineData)\n                .enter()\n                .append(\"circle\")\n                .attr(\"class\", `station station-${line}`) // 라인별 클래스 추가\n                .attr(\"cx\", d => xScale(parseFloat(d.x)))\n                .attr(\"cy\", d => yScale(parseFloat(d.y)))\n                .attr(\"r\", 3)\n                .attr(\"fill\", \"white\")\n                .attr(\"stroke\", \"black\")\n                .attr(\"stroke-width\", 2)\n                .on(\"click\", function (event, d) {\n                    event.stopPropagation(); // 이벤트 버블링 방지\n                    showTooltip(d);\n                });\n        }\n\n        // 점 하단에 이름 추가\n        svgContainer.selectAll(\".station-name\")\n            .data(subwayData)\n            .enter()\n            .append(\"text\")\n            .attr(\"class\", \"station-name\")\n            .attr(\"x\", d => xScale(parseFloat(d.x)))\n            .attr(\"y\", d => yScale(parseFloat(d.y)) + 10)\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"6px\")\n            .attr(\"fill\", \"black\")\n            .text(d => d.name);\n\n        // SVG에 마우스 드래그로 이동 기능 추가\n        svg.call(d3.drag()\n            .on('start', dragStarted)\n            .on('drag', dragged)\n            .on('end', dragEnded)\n        );\n\n        let lastX = 0;\n        let lastY = 0;\n\n        function dragStarted(event) {\n            lastX = event.x;\n            lastY = event.y;\n        }\n\n        function dragged(event) {\n            const newX = lastX - event.x;\n            const newY = lastY - event.y;\n\n            svgContainer.attr('transform', `translate(${-newX},${-newY})`);\n\n            lastX = event.x;\n            lastY = event.y;\n        }\n\n        function dragEnded() {\n            // 마우스 드래그 종료 시 필요한 동작 구현\n        }\n\n        // 말풍선 표시 함수\n        const showTooltip = (data) => {\n            d3.select(\".tooltip\").remove(); // 기존 툴팁 제거\n\n            const tooltip = svg.append(\"g\")\n                .attr(\"class\", \"tooltip\")\n                .attr(\"transform\", `translate(${xScale(parseFloat(data.x))}, ${yScale(parseFloat(data.y)) - 120})`);\n\n            tooltip.append(\"rect\")\n                .attr(\"width\", 150)\n                .attr(\"height\", 100)\n                .attr(\"x\", -75)\n                .attr(\"y\", 0)\n                .attr(\"fill\", \"white\")\n                .attr(\"stroke\", \"black\");\n\n            tooltip.append(\"text\")\n                .attr(\"x\", 0)\n                .attr(\"y\", 20)\n                .attr(\"text-anchor\", \"middle\")\n                .text(data.name);\n\n            // 버튼 데이터 배열\n            const buttons = [\n                { text: '출발', x: -30, y: 70 },\n                { text: '도착', x: 30, y: 70 }\n            ];\n\n            // 버튼 생성\n            buttons.forEach(button => {\n                // 버튼 배경\n                tooltip.append(\"rect\")\n                    .attr(\"x\", button.x - 20)\n                    .attr(\"y\", button.y - 15)\n                    .attr(\"width\", 40)\n                    .attr(\"height\", 30)\n                    .attr(\"fill\", \"lightgrey\")\n                    .attr(\"rx\", 5) // 둥근 모서리\n                    .style(\"cursor\", \"pointer\")\n                    .on(\"click\", () => {\n                        if (button.text === \"닫기\") {\n                            tooltip.remove();\n                        } else {\n                            console.log(`${button.text} 버튼 클릭`);\n                            // 출발 또는 도착 버튼 클릭 시 필요한 동작 구현\n                        }\n                    });\n\n                // 버튼 텍스트\n                tooltip.append(\"text\")\n                    .attr(\"x\", button.x)\n                    .attr(\"y\", button.y)\n                    .attr(\"text-anchor\", \"middle\")\n                    .attr(\"alignment-baseline\", \"middle\")\n                    .text(button.text)\n                    .style(\"cursor\", \"pointer\")\n                    .on(\"click\", () => {\n                        if (button.text === \"닫기\") {\n                            tooltip.remove();\n                        } else {\n                            console.log(`${button.text} 버튼 클릭`);\n                            // 출발 또는 도착 버튼 클릭 시 필요한 동작 구현\n                        }\n                    });\n            });\n        };\n    }, []);\n\n    return (\n        <Main\n            title=\"지하철 노선도\"\n            description=\"지하철 노선도 페이지\"\n        >\n            <div\n                id=\"picture\"\n                style={{\n                    width: 'calc(100vw - 260px)',\n                    height: 'calc(100vh - 60px)',\n                    overflow: 'hidden', // SVG가 컨테이너를 벗어나는 것을 방지하기 위해 overflow를 hidden으로 설정\n                    position: 'relative' // 내부 SVG 요소의 위치를 절대적으로 조정하기 위해 부모 요소에 position을 설정\n                }}\n            >\n                <svg\n                    ref={ref}\n                    viewBox={`0 0 ${1800} ${1000}`} // SVG 요소의 viewBox를 설정하여 내부 요소가 잘 보이도록 함\n                    style={{\n                        width: '100%',\n                        height: '100%',\n                        position: 'absolute', // SVG 요소의 위치를 부모 요소에 상대적으로 설정\n                        top: 0, // SVG 요소가 부모 요소의 좌측 상단에 위치하도록 함\n                        left: 0\n                    }}\n                ></svg>\n            </div>\n        </Main>\n    );\n};\n\nexport default Routemap;\n"],"names":["ref","useRef","useEffect","svg","d3","current","on","remove","attr","selectAll","svgContainer","append","zoom","scaleExtent","translateExtent","event","transform","call","_step","xScale","domain","subwayData","d","parseFloat","x","range","yScale","y","lineColor","line","groupedData","_iterator","_createForOfIteratorHelper","s","n","done","_step$value","_slicedToArray","value","lineData","lineGenerator","curve","datum","concat","data","enter","stopPropagation","showTooltip","err","e","f","text","name","lastX","lastY","newX","newY","tooltip","forEach","button","style","console","log","_jsx","Main","title","description","children","id","width","height","overflow","position","viewBox","top","left"],"sourceRoot":""}