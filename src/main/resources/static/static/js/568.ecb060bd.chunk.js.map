{"version":3,"file":"static/js/568.ecb060bd.chunk.js","mappings":"uNAoDA,UA9Ca,WACT,IAAAA,GAAsCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhCI,GAAFF,EAAA,GAAgBA,EAAA,IAE5BG,GAAWC,EAAAA,EAAAA,MACXC,EAAcF,EAASG,OAASH,EAASG,MAAMD,YAE/CE,EAAkB,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOP,GAAW,IAAAQ,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGdC,EAAAA,EAAMC,KAAK,mCAAoC,CAAEC,KAAMf,IAAe,KAAD,EAAtFQ,EAAQE,EAAAM,KAEdnB,EAAeW,EAASO,MAAML,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,SAE9BQ,QAAQC,MAAM,4DAAcT,EAAAO,IAC5BC,QAAQE,IAAI,6BAAUV,EAAAO,GAAMT,UAAW,yBAAAE,EAAAW,OAAA,GAAAd,EAAA,kBAE9C,gBAVuBe,GAAA,OAAAnB,EAAAoB,MAAA,KAAAC,UAAA,KAiBxB,OAJAC,EAAAA,EAAAA,YAAU,WACNvB,GACJ,GAAG,KAGCwB,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACDC,MAAM,2BACNC,YAAY,wCAASC,SAAA,CAGpB9B,IACG+B,EAAAA,EAAAA,KAAA,OAAAD,UACIJ,EAAAA,EAAAA,MAAA,MAAAI,SAAA,CAAI,iDAAY9B,QAKtBA,IACE0B,EAAAA,EAAAA,MAAA,OAAAI,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iFACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0HAKxB,C","sources":["pages/Live.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Main from '../components/section/Main';\nimport axios from 'axios';\n\n\nconst Live = () => {\n    const [arrivalInfo, setArrivalInfo] = useState(null); // 도착 정보 상태\n\n    const location = useLocation();\n    const stationName = location.state && location.state.stationName;\n\n    const fetchDataFromFlask = async (stationName) => {\n        try {\n            // Flask 서버로 stationName을 전달하고 도착 정보를 받아옴\n            const response = await axios.post(\"http://flask:8082/subway_arrival\", { data: stationName });\n            // 받아온 도착 정보를 상태에 저장\n            setArrivalInfo(response.data);\n        } catch (error) {\n            console.error('데이터 가져오기 실패:', error);\n            console.log('에러 응답:', error.response); // 에러 응답 확인\n        }\n    };\n\n    // 컴포넌트가 마운트될 때 데이터 가져오기\n    useEffect(() => {\n        fetchDataFromFlask();\n    }, []);\n\n    return (\n        <Main\n            title=\"상행하행\"\n            description=\"테스트 페이지\"\n        >\n            {/* stationName이 존재하는 경우에만 아래 내용을 표시 */}\n            {stationName && (\n                <div>\n                    <h2>실시간 도착 정보: {stationName}</h2>\n                    {/* 실시간 도착 정보를 표시하는 컴포넌트나 로직을 추가할 수 있습니다. */}\n                </div>\n            )}\n            {/* stationName이 존재하지 않는 경우에만 아래 내용을 표시 */}\n            {!stationName && (\n                <div>\n                    <h1>실시간 도착정보가 없습니다.</h1>\n                    <h4>지도에서 실시간 도착정보를 클릭해주세요.</h4>\n                </div>\n            )}\n        </Main>\n    );\n};\n\nexport default Live;"],"names":["_useState","useState","_useState2","_slicedToArray","setArrivalInfo","location","useLocation","stationName","state","fetchDataFromFlask","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","axios","post","data","sent","t0","console","error","log","stop","_x","apply","arguments","useEffect","_jsxs","Main","title","description","children","_jsx"],"sourceRoot":""}