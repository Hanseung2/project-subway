{"version":3,"file":"static/js/568.fe394fc6.chunk.js","mappings":"uNA+DA,UAzDa,WACT,IAAAA,GAAsCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAE5BI,GAAWC,EAAAA,EAAAA,MACXC,EAAcF,EAASG,OAASH,EAASG,MAAMD,YAE/CE,EAAkB,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGIC,EAAAA,EAAMC,IAAI,0CAA2C,CAAEd,YAAAA,IAAe,KAAD,EAAtFQ,EAAQE,EAAAK,KAGdlB,EAAeW,EAASQ,MAAMN,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,SAE9BQ,QAAQC,MAAM,4DAAcT,EAAAO,IAAS,yBAAAP,EAAAU,OAAA,GAAAb,EAAA,kBAE5C,kBAVuB,OAAAJ,EAAAkB,MAAA,KAAAC,UAAA,KAiBxB,OAJAC,EAAAA,EAAAA,YAAU,WACNrB,GACJ,GAAG,KAGCsB,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACDC,MAAM,2BACNC,YAAY,wCAASC,SAEpBhC,GACGiC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,iDAAY5B,MAChBwB,EAAAA,EAAAA,KAAA,MAAAI,SAEKE,OAAOC,KAAKnC,GAAaoC,QAAO,SAAAC,GAAG,MAAY,6BAARA,CAAc,IAAEC,KAAI,SAACC,EAAOC,GAAK,OACrEP,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACIJ,EAAAA,EAAAA,KAAA,MAAAI,SAAKO,KACLX,EAAAA,EAAAA,KAAA,MAAAI,SACKE,OAAOC,KAAKnC,EAAYuC,IAAQD,KAAI,SAACD,EAAKI,GAAG,OAC1CR,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CACKK,EAAI,KAAGrC,EAAYuC,GAAOF,KADtBI,EAEJ,QANRD,EASJ,UAKjBP,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIJ,EAAAA,EAAAA,KAAA,MAAAI,SAAI,iFACJJ,EAAAA,EAAAA,KAAA,MAAAI,SAAI,sFAKxB,C","sources":["pages/Live.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Main from '../components/section/Main';\nimport axios from 'axios';\n\n\nconst Live = () => {\n    const [arrivalInfo, setArrivalInfo] = useState(null); // 도착 정보 상태\n\n    const location = useLocation();\n    const stationName = location.state && location.state.stationName;\n\n    const fetchDataFromFlask = async () => {\n        try {\n            // Flask 서버로 station name을 전달하고 도착 정보를 받아옴\n            const response = await axios.get('http://flask:8082/receive_subway_arrive', { stationName });\n\n            // 받아온 도착 정보를 상태에 저장\n            setArrivalInfo(response.data);\n        } catch (error) {\n            console.error('데이터 가져오기 실패:', error);\n        }\n    };\n\n    // 컴포넌트가 마운트될 때 데이터 가져오기\n    useEffect(() => {\n        fetchDataFromFlask();\n    }, []);\n\n    return (\n        <Main\n            title=\"상행하행\"\n            description=\"테스트 페이지\"\n        >\n            {arrivalInfo ? (\n                <div>\n                    <h2>실시간 도착 정보: {stationName}</h2>\n                    <ul>\n                        {/* 선택한 키만 출력 */}\n                        {Object.keys(arrivalInfo).filter(key => key === '원하는키').map((train, index) => (\n                            <li key={index}>\n                                <h3>{train}</h3>\n                                <ul>\n                                    {Object.keys(arrivalInfo[train]).map((key, idx) => (\n                                        <li key={idx}>\n                                            {key}: {arrivalInfo[train][key]}\n                                        </li>\n                                    ))}\n                                </ul>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            ) : (\n                <div>\n                    <h1>실시간 도착정보가 없습니다.</h1>\n                    <h4>데이터를 가져오는 중입니다...</h4>\n                </div>\n            )}\n        </Main>\n    );\n};\n\nexport default Live;"],"names":["_useState","useState","_useState2","_slicedToArray","arrivalInfo","setArrivalInfo","location","useLocation","stationName","state","fetchDataFromFlask","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","axios","get","sent","data","t0","console","error","stop","apply","arguments","useEffect","_jsx","Main","title","description","children","_jsxs","Object","keys","filter","key","map","train","index","idx"],"sourceRoot":""}